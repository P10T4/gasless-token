{
  "address": "0x90614D444FAEf4077e07b0Cbc20099de67CFBc01",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "sufficient",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xda0357348e4fdd4ca88944b7e6eb24f1602fd3c9b7f06e1a4db806215b94ccb9",
  "receipt": {
    "to": null,
    "from": "0xF4E8d4160BB5420D9D9fF1ed42044E660a2b2F32",
    "contractAddress": "0x90614D444FAEf4077e07b0Cbc20099de67CFBc01",
    "transactionIndex": 0,
    "gasUsed": "429739",
    "logsBloom": "0x
    "blockHash": "0x21ef82dbc4c3e3ef11dec2a5bc126b1438c1b5ac8d134c95331db4580c2b79da",
    "transactionHash": "0xda0357348e4fdd4ca88944b7e6eb24f1602fd3c9b7f06e1a4db806215b94ccb9",
    "logs": [],
    "blockNumber": 18,
    "cumulativeGasUsed": "429739",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0C8105BEA571004771D9fEfB6F8676b389827D0a"
  ],
  "solcInputHash": "e5963d029116fabcb8536342dab9cd15",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"sufficient\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"},\"mint(uint256)\":{\"notice\":\"mint some coins for this caller. (in a real-life application, minting is protected for admin, or by other mechanism. but for our sample, any user can mint some coins - but just once..\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetaCoin.sol\":\"MetaCoin\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.7.6;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address payable ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal override virtual view returns (bytes memory ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc52d38ab8f48b44bda064f803f2400e5d2d971969f1490430951e79135708fd2\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address payable);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal virtual view returns (bytes memory);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6243d3a925653ed0bde57e9fae7fb87f12c58a2376b27ae23b53502322532e00\",\"license\":\"GPL-3.0-only\"},\"contracts/MetaCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"@opengsn/contracts/src/BaseRelayRecipient.sol\\\";\\n\\ncontract MetaCoin is BaseRelayRecipient {\\n\\n\\tstring public symbol = \\\"META\\\";\\n\\tstring public description = \\\"GSN Sample MetaCoin\\\";\\n\\tuint public decimals = 0;\\n\\n\\tmapping(address => uint) balances;\\n\\n\\tconstructor(address forwarder) public {\\n        balances[tx.origin] = 10000;\\n        trustedForwarder = forwarder;\\n    }\\n\\n    function versionRecipient() external override view returns (string memory) {\\n        return \\\"2.2.2\\\";\\n    }\\n\\n    function transfer(address receiver, uint amount) public returns (bool sufficient) {\\n        if (balances[_msgSender()] < amount) return false;\\n        balances[_msgSender()] -= amount;\\n        balances[receiver] += amount;\\n        // emit Transfer(_msgSender(), receiver, amount);\\n        return true;\\n    }\\n\\n    function balanceOf(address addr) public view returns (uint) {\\n        return balances[addr];\\n    }\\n\\n\\n    mapping(address => bool) minted;\\n\\n    /**\\n     * mint some coins for this caller.\\n     * (in a real-life application, minting is protected for admin, or by other mechanism.\\n     * but for our sample, any user can mint some coins - but just once..\\n     */\\n    function mint(uint amount) public {\\n        require(!minted[_msgSender()], \\\"already minted\\\");\\n        minted[_msgSender()] = true;\\n        balances[_msgSender()] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0xa674bc9fb6ae78b957a00ff8844df8c49f98a7e27425cd7f8e24acb1e675e9dd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405260046080819052634d45544160e01b60a090815261002591600191906100d7565b506040805180820190915260138082527f47534e2053616d706c65204d657461436f696e00000000000000000000000000602090920191825261006a916002916100d7565b50600060035534801561007c57600080fd5b506040516106b63803806106b68339818101604052602081101561009f57600080fd5b5051326000908152600460205260408120612710905580546001600160a01b0319166001600160a01b03909216919091179055610178565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261010d5760008555610153565b82601f1061012657805160ff1916838001178555610153565b82800160010185558215610153579182015b82811115610153578251825591602001919060010190610138565b5061015f929150610163565b5090565b5b8082111561015f5760008155600101610164565b61052f806101876000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637284e416116100665780637284e4161461018f5780637da0a8771461019757806395d89b41146101bb578063a0712d68146101c3578063a9059cbb146101e257610093565b8063313ce56714610098578063486ff0cd146100b2578063572b6c051461012f57806370a0823114610169575b600080fd5b6100a061020e565b60408051918252519081900360200190f35b6100ba610214565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f45781810151838201526020016100dc565b50505050905090810190601f1680156101215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101556004803603602081101561014557600080fd5b50356001600160a01b0316610234565b604080519115158252519081900360200190f35b6100a06004803603602081101561017f57600080fd5b50356001600160a01b0316610248565b6100ba610263565b61019f6102ee565b604080516001600160a01b039092168252519081900360200190f35b6100ba6102fd565b6101e0600480360360208110156101d957600080fd5b5035610357565b005b610155600480360360408110156101f857600080fd5b506001600160a01b038135169060200135610438565b60035481565b604080518082019091526005815264191719171960d91b60208201525b90565b6000546001600160a01b0390811691161490565b6001600160a01b031660009081526004602052604090205490565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156102e65780601f106102bb576101008083540402835291602001916102e6565b820191906000526020600020905b8154815290600101906020018083116102c957829003601f168201915b505050505081565b6000546001600160a01b031681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102e65780601f106102bb576101008083540402835291602001916102e6565b600560006103636104c7565b6001600160a01b0316815260208101919091526040016000205460ff16156103c3576040805162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b604482015290519081900360640190fd5b6001600560006103d16104c7565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555080600460006104156104c7565b6001600160a01b0316815260208101919091526040016000208054909101905550565b600081600460006104476104c7565b6001600160a01b03166001600160a01b03168152602001908152602001600020541015610476575060006104c1565b81600460006104836104c7565b6001600160a01b0390811682526020808301939093526040918201600090812080549590950390945586168352600490915290208054830190555060015b92915050565b6000601436108015906104de57506104de33610234565b156104f2575060131936013560601c610231565b503361023156fea2646970667358221220f6e91fccaa038343192f92a2b1e9535acd4fcb0a0a034b867c412d4e3cf37ccd64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80637284e416116100665780637284e4161461018f5780637da0a8771461019757806395d89b41146101bb578063a0712d68146101c3578063a9059cbb146101e257610093565b8063313ce56714610098578063486ff0cd146100b2578063572b6c051461012f57806370a0823114610169575b600080fd5b6100a061020e565b60408051918252519081900360200190f35b6100ba610214565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f45781810151838201526020016100dc565b50505050905090810190601f1680156101215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101556004803603602081101561014557600080fd5b50356001600160a01b0316610234565b604080519115158252519081900360200190f35b6100a06004803603602081101561017f57600080fd5b50356001600160a01b0316610248565b6100ba610263565b61019f6102ee565b604080516001600160a01b039092168252519081900360200190f35b6100ba6102fd565b6101e0600480360360208110156101d957600080fd5b5035610357565b005b610155600480360360408110156101f857600080fd5b506001600160a01b038135169060200135610438565b60035481565b604080518082019091526005815264191719171960d91b60208201525b90565b6000546001600160a01b0390811691161490565b6001600160a01b031660009081526004602052604090205490565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156102e65780601f106102bb576101008083540402835291602001916102e6565b820191906000526020600020905b8154815290600101906020018083116102c957829003601f168201915b505050505081565b6000546001600160a01b031681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102e65780601f106102bb576101008083540402835291602001916102e6565b600560006103636104c7565b6001600160a01b0316815260208101919091526040016000205460ff16156103c3576040805162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b604482015290519081900360640190fd5b6001600560006103d16104c7565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555080600460006104156104c7565b6001600160a01b0316815260208101919091526040016000208054909101905550565b600081600460006104476104c7565b6001600160a01b03166001600160a01b03168152602001908152602001600020541015610476575060006104c1565b81600460006104836104c7565b6001600160a01b0390811682526020808301939093526040918201600090812080549590950390945586168352600490915290208054830190555060015b92915050565b6000601436108015906104de57506104de33610234565b156104f2575060131936013560601c610231565b503361023156fea2646970667358221220f6e91fccaa038343192f92a2b1e9535acd4fcb0a0a034b867c412d4e3cf37ccd64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      },
      "mint(uint256)": {
        "notice": "mint some coins for this caller. (in a real-life application, minting is protected for admin, or by other mechanism. but for our sample, any user can mint some coins - but just once.."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MetaCoin.sol:MetaCoin",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 117,
        "contract": "contracts/MetaCoin.sol:MetaCoin",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 120,
        "contract": "contracts/MetaCoin.sol:MetaCoin",
        "label": "description",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 123,
        "contract": "contracts/MetaCoin.sol:MetaCoin",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 127,
        "contract": "contracts/MetaCoin.sol:MetaCoin",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 203,
        "contract": "contracts/MetaCoin.sol:MetaCoin",
        "label": "minted",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}