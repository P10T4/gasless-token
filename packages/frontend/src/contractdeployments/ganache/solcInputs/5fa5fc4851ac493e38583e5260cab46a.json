{
  "language": "Solidity",
  "sources": {
    "contracts/FreeCoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\n\n// interface IERC20 {\n//     // function totalSupply() external view returns (uint);\n\n//     function balanceOf(address account) external view returns (uint);\n\n//     function transfer(address recipient, uint amount) external returns (bool);\n\n//     function allowance(address owner, address spender) external view returns (uint);\n\n//     function approve(address spender, uint amount) external returns (bool);\n\n//     function transferFrom(\n//         address sender,\n//         address recipient,\n//         uint amount\n//     ) external returns (bool);\n\n//     event Transfer(address indexed from, address indexed to, uint value);\n//     event Approval(address indexed owner, address indexed spender, uint value);\n// }\n\ncontract FreeCoin {\n\n    string public symbol = \"FC\";\n    string public description = \"FreeCoin\";\n    uint public decimals = 0;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowance;\n\n\n    // implement the permit function copy from dai contract\n    // https://github.com/makerdao/dss/blob/master/src/dai.sol\n\n    // --- EIP712 niceties ---\n    bytes32 public DOMAIN_SEPARATOR;\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\n    mapping (address => uint) public nonces;\n\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry,\n                    bool allowed, uint8 v, bytes32 r, bytes32 s) external\n    {\n        bytes32 digest =\n            keccak256(abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH,\n                                     holder,\n                                     spender,\n                                     nonce,\n                                     expiry,\n                                     allowed))\n        ));\n\n        require(holder != address(0), \"Dai/invalid-address-0\");\n        require(holder == ecrecover(digest, v, r, s), \"Dai/invalid-permit\");\n        require(expiry == 0 || block.timestamp <= expiry, \"Dai/permit-expired\");\n        require(nonce == nonces[holder]++, \"Dai/invalid-nonce\");\n        uint wad = allowed ? uint(-1) : 0;\n        allowance[holder][spender] = wad;\n    }\n\n\n\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        if (balances[_from] >= _value && allowance[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowance[_from][msg.sender] -= _value;\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function mint(uint amount, address receiver) public {\n        balances[receiver] += amount;\n    }\n}\n\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}